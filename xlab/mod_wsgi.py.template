"""
WSGI config for aelerons project.

This module contains the WSGI application used by Django's development server
and any production WSGI deployments. It should expose a module-level variable
named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
this application via the ``WSGI_APPLICATION`` setting.

Usually you will have the standard Django WSGI application here, but it also
might make sense to replace the whole Django WSGI application with a custom one
that later delegates to the Django one. For example, you could introduce WSGI
middleware here, or combine a Django application with an application of another
framework.

"""
import os
import sys
import site


##### Server Settings #####
# (Change values for installation)
## Site packages in virtual environment
SITE_PACKAGES='/srv/wsgi/aelerons/lib/python2.7/site-packages'

## Base directory for virtual environment
VIRTUAL_BASE='/srv/wsgi/aelerons/'

## Base directory for Aelerons application
APPLICATION_BASE='/srv/wsgi/aelerons/Aelerons'

## Settings for the Aelerons Application
APPLICATION_SETTINGS='aelerons.settings'

## Virtual environment activation for mod_wsgi
ACTIVATE='/srv/wsgi/aelerons/bin/activate_this.py'



site.addsitedir(SITE_PACKAGES)
sys.path.append(VIRTUAL_BASE)
sys.path.append(APPLICATION_BASE)

# We defer to a DJANGO_SETTINGS_MODULE already in the environment. This breaks
# if running multiple sites in the same mod_wsgi process. To fix this, use
# mod_wsgi daemon mode with each site in its own daemon process, or use
# os.environ["DJANGO_SETTINGS_MODULE"] = "aelerons.settings"
os.environ.setdefault("DJANGO_SETTINGS_MODULE", APPLICATION_SETTINGS)
activate_env=os.path.expanduser(ACTIVATE)
execfile(activate_env, dict(__file__=activate_env))

# This application object is used by any WSGI server configured to use this
# file. This includes Django's development server, if the WSGI_APPLICATION
# setting points here.
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()
