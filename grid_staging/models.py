from __future__ import unicode_literals

from django.db import models

class Land(models.Model):
    uuid = models.CharField(max_length=255L, primary_key=True, db_column='UUID')
    regionuuid = models.CharField(max_length=255L, db_column='RegionUUID', blank=True)
    locallandid = models.IntegerField(null=True, db_column='LocalLandID', blank=True)
    bitmap = models.TextField(db_column='Bitmap', blank=True)
    name = models.CharField(max_length=255L, db_column='Name', blank=True)
    description = models.CharField(max_length=255L, db_column='Description', blank=True)
    owneruuid = models.CharField(max_length=255L, db_column='OwnerUUID', blank=True)
    isgroupowned = models.IntegerField(null=True, db_column='IsGroupOwned', blank=True)
    area = models.IntegerField(null=True, db_column='Area', blank=True)
    auctionid = models.IntegerField(null=True, db_column='AuctionID', blank=True)
    category = models.IntegerField(null=True, db_column='Category', blank=True)
    claimdate = models.IntegerField(null=True, db_column='ClaimDate', blank=True)
    claimprice = models.IntegerField(null=True, db_column='ClaimPrice', blank=True)
    groupuuid = models.CharField(max_length=255L, db_column='GroupUUID', blank=True)
    saleprice = models.IntegerField(null=True, db_column='SalePrice', blank=True)
    landstatus = models.IntegerField(null=True, db_column='LandStatus', blank=True)
    landflags = models.IntegerField(null=True, db_column='LandFlags', blank=True)
    landingtype = models.IntegerField(null=True, db_column='LandingType', blank=True)
    mediaautoscale = models.IntegerField(null=True, db_column='MediaAutoScale', blank=True)
    mediatextureuuid = models.CharField(max_length=255L, db_column='MediaTextureUUID', blank=True)
    mediaurl = models.CharField(max_length=255L, db_column='MediaURL', blank=True)
    musicurl = models.CharField(max_length=255L, db_column='MusicURL', blank=True)
    passhours = models.FloatField(null=True, db_column='PassHours', blank=True)
    passprice = models.IntegerField(null=True, db_column='PassPrice', blank=True)
    snapshotuuid = models.CharField(max_length=255L, db_column='SnapshotUUID', blank=True)
    userlocationx = models.FloatField(null=True, db_column='UserLocationX', blank=True)
    userlocationy = models.FloatField(null=True, db_column='UserLocationY', blank=True)
    userlocationz = models.FloatField(null=True, db_column='UserLocationZ', blank=True)
    userlookatx = models.FloatField(null=True, db_column='UserLookAtX', blank=True)
    userlookaty = models.FloatField(null=True, db_column='UserLookAtY', blank=True)
    userlookatz = models.FloatField(null=True, db_column='UserLookAtZ', blank=True)
    authbuyerid = models.CharField(max_length=36L, db_column='AuthbuyerID')
    othercleantime = models.IntegerField(db_column='OtherCleanTime')
    dwell = models.IntegerField(db_column='Dwell')
    mediatype = models.CharField(max_length=32L, db_column='MediaType')
    mediadescription = models.CharField(max_length=255L, db_column='MediaDescription')
    mediasize = models.CharField(max_length=16L, db_column='MediaSize')
    medialoop = models.IntegerField(db_column='MediaLoop')
    obscuremusic = models.IntegerField(db_column='ObscureMusic')
    obscuremedia = models.IntegerField(db_column='ObscureMedia')
    class Meta:
        db_table = 'land'

class Landaccesslist(models.Model):
    landuuid = models.CharField(max_length=255L, db_column='LandUUID', blank=True)
    accessuuid = models.CharField(max_length=255L, db_column='AccessUUID', blank=True)
    flags = models.IntegerField(null=True, db_column='Flags', blank=True)
    expires = models.IntegerField(db_column='Expires')
    class Meta:
        db_table = 'landaccesslist'

class Migrations(models.Model):
    name = models.CharField(max_length=100L, blank=True)
    version = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = 'migrations'

class Primitems(models.Model):
    invtype = models.IntegerField(null=True, db_column='invType', blank=True)
    assettype = models.IntegerField(null=True, db_column='assetType', blank=True)
    name = models.CharField(max_length=255L, blank=True)
    description = models.CharField(max_length=255L, blank=True)
    creationdate = models.BigIntegerField(null=True, db_column='creationDate', blank=True)
    nextpermissions = models.IntegerField(null=True, db_column='nextPermissions', blank=True)
    currentpermissions = models.IntegerField(null=True, db_column='currentPermissions', blank=True)
    basepermissions = models.IntegerField(null=True, db_column='basePermissions', blank=True)
    everyonepermissions = models.IntegerField(null=True, db_column='everyonePermissions', blank=True)
    grouppermissions = models.IntegerField(null=True, db_column='groupPermissions', blank=True)
    flags = models.IntegerField()
    itemid = models.CharField(max_length=36L, primary_key=True, db_column='itemID')
    primid = models.CharField(max_length=36L, db_column='primID', blank=True)
    assetid = models.CharField(max_length=36L, db_column='assetID', blank=True)
    parentfolderid = models.CharField(max_length=36L, db_column='parentFolderID', blank=True)
    creatorid = models.CharField(max_length=255L, db_column='CreatorID')
    ownerid = models.CharField(max_length=36L, db_column='ownerID', blank=True)
    groupid = models.CharField(max_length=36L, db_column='groupID', blank=True)
    lastownerid = models.CharField(max_length=36L, db_column='lastOwnerID', blank=True)
    class Meta:
        db_table = 'primitems'

class Prims(models.Model):
    creationdate = models.IntegerField(null=True, db_column='CreationDate', blank=True)
    name = models.CharField(max_length=255L, db_column='Name', blank=True)
    text = models.CharField(max_length=255L, db_column='Text', blank=True)
    description = models.CharField(max_length=255L, db_column='Description', blank=True)
    sitname = models.CharField(max_length=255L, db_column='SitName', blank=True)
    touchname = models.CharField(max_length=255L, db_column='TouchName', blank=True)
    objectflags = models.IntegerField(null=True, db_column='ObjectFlags', blank=True)
    ownermask = models.IntegerField(null=True, db_column='OwnerMask', blank=True)
    nextownermask = models.IntegerField(null=True, db_column='NextOwnerMask', blank=True)
    groupmask = models.IntegerField(null=True, db_column='GroupMask', blank=True)
    everyonemask = models.IntegerField(null=True, db_column='EveryoneMask', blank=True)
    basemask = models.IntegerField(null=True, db_column='BaseMask', blank=True)
    positionx = models.FloatField(null=True, db_column='PositionX', blank=True)
    positiony = models.FloatField(null=True, db_column='PositionY', blank=True)
    positionz = models.FloatField(null=True, db_column='PositionZ', blank=True)
    grouppositionx = models.FloatField(null=True, db_column='GroupPositionX', blank=True)
    grouppositiony = models.FloatField(null=True, db_column='GroupPositionY', blank=True)
    grouppositionz = models.FloatField(null=True, db_column='GroupPositionZ', blank=True)
    velocityx = models.FloatField(null=True, db_column='VelocityX', blank=True)
    velocityy = models.FloatField(null=True, db_column='VelocityY', blank=True)
    velocityz = models.FloatField(null=True, db_column='VelocityZ', blank=True)
    angularvelocityx = models.FloatField(null=True, db_column='AngularVelocityX', blank=True)
    angularvelocityy = models.FloatField(null=True, db_column='AngularVelocityY', blank=True)
    angularvelocityz = models.FloatField(null=True, db_column='AngularVelocityZ', blank=True)
    accelerationx = models.FloatField(null=True, db_column='AccelerationX', blank=True)
    accelerationy = models.FloatField(null=True, db_column='AccelerationY', blank=True)
    accelerationz = models.FloatField(null=True, db_column='AccelerationZ', blank=True)
    rotationx = models.FloatField(null=True, db_column='RotationX', blank=True)
    rotationy = models.FloatField(null=True, db_column='RotationY', blank=True)
    rotationz = models.FloatField(null=True, db_column='RotationZ', blank=True)
    rotationw = models.FloatField(null=True, db_column='RotationW', blank=True)
    sittargetoffsetx = models.FloatField(null=True, db_column='SitTargetOffsetX', blank=True)
    sittargetoffsety = models.FloatField(null=True, db_column='SitTargetOffsetY', blank=True)
    sittargetoffsetz = models.FloatField(null=True, db_column='SitTargetOffsetZ', blank=True)
    sittargetorientw = models.FloatField(null=True, db_column='SitTargetOrientW', blank=True)
    sittargetorientx = models.FloatField(null=True, db_column='SitTargetOrientX', blank=True)
    sittargetorienty = models.FloatField(null=True, db_column='SitTargetOrientY', blank=True)
    sittargetorientz = models.FloatField(null=True, db_column='SitTargetOrientZ', blank=True)
    uuid = models.CharField(max_length=36L, primary_key=True, db_column='UUID')
    regionuuid = models.CharField(max_length=36L, db_column='RegionUUID', blank=True)
    creatorid = models.CharField(max_length=255L, db_column='CreatorID')
    ownerid = models.CharField(max_length=36L, db_column='OwnerID', blank=True)
    groupid = models.CharField(max_length=36L, db_column='GroupID', blank=True)
    lastownerid = models.CharField(max_length=36L, db_column='LastOwnerID', blank=True)
    scenegroupid = models.CharField(max_length=36L, db_column='SceneGroupID', blank=True)
    payprice = models.IntegerField(db_column='PayPrice')
    paybutton1 = models.IntegerField(db_column='PayButton1')
    paybutton2 = models.IntegerField(db_column='PayButton2')
    paybutton3 = models.IntegerField(db_column='PayButton3')
    paybutton4 = models.IntegerField(db_column='PayButton4')
    loopedsound = models.CharField(max_length=36L, db_column='LoopedSound')
    loopedsoundgain = models.FloatField(db_column='LoopedSoundGain')
    textureanimation = models.TextField(db_column='TextureAnimation', blank=True)
    omegax = models.FloatField(db_column='OmegaX')
    omegay = models.FloatField(db_column='OmegaY')
    omegaz = models.FloatField(db_column='OmegaZ')
    cameraeyeoffsetx = models.FloatField(db_column='CameraEyeOffsetX')
    cameraeyeoffsety = models.FloatField(db_column='CameraEyeOffsetY')
    cameraeyeoffsetz = models.FloatField(db_column='CameraEyeOffsetZ')
    cameraatoffsetx = models.FloatField(db_column='CameraAtOffsetX')
    cameraatoffsety = models.FloatField(db_column='CameraAtOffsetY')
    cameraatoffsetz = models.FloatField(db_column='CameraAtOffsetZ')
    forcemouselook = models.IntegerField(db_column='ForceMouselook')
    scriptaccesspin = models.IntegerField(db_column='ScriptAccessPin')
    alloweddrop = models.IntegerField(db_column='AllowedDrop')
    dieatedge = models.IntegerField(db_column='DieAtEdge')
    saleprice = models.IntegerField(db_column='SalePrice')
    saletype = models.IntegerField(db_column='SaleType')
    colorr = models.IntegerField(db_column='ColorR')
    colorg = models.IntegerField(db_column='ColorG')
    colorb = models.IntegerField(db_column='ColorB')
    colora = models.IntegerField(db_column='ColorA')
    particlesystem = models.TextField(db_column='ParticleSystem', blank=True)
    clickaction = models.IntegerField(db_column='ClickAction')
    material = models.IntegerField(db_column='Material')
    collisionsound = models.CharField(max_length=36L, db_column='CollisionSound')
    collisionsoundvolume = models.FloatField(db_column='CollisionSoundVolume')
    linknumber = models.IntegerField(db_column='LinkNumber')
    passtouches = models.IntegerField(db_column='PassTouches')
    mediaurl = models.CharField(max_length=255L, db_column='MediaURL', blank=True)
    dynattrs = models.TextField(db_column='DynAttrs', blank=True)
    physicsshapetype = models.IntegerField(db_column='PhysicsShapeType')
    density = models.FloatField(db_column='Density')
    gravitymodifier = models.FloatField(db_column='GravityModifier')
    friction = models.FloatField(db_column='Friction')
    restitution = models.FloatField(db_column='Restitution')
    keyframemotion = models.TextField(db_column='KeyframeMotion', blank=True)
    attachedposx = models.FloatField(null=True, db_column='AttachedPosX', blank=True)
    attachedposy = models.FloatField(null=True, db_column='AttachedPosY', blank=True)
    attachedposz = models.FloatField(null=True, db_column='AttachedPosZ', blank=True)
    class Meta:
        db_table = 'prims'

class Primshapes(models.Model):
    shape = models.IntegerField(null=True, db_column='Shape', blank=True)
    scalex = models.FloatField(db_column='ScaleX')
    scaley = models.FloatField(db_column='ScaleY')
    scalez = models.FloatField(db_column='ScaleZ')
    pcode = models.IntegerField(null=True, db_column='PCode', blank=True)
    pathbegin = models.IntegerField(null=True, db_column='PathBegin', blank=True)
    pathend = models.IntegerField(null=True, db_column='PathEnd', blank=True)
    pathscalex = models.IntegerField(null=True, db_column='PathScaleX', blank=True)
    pathscaley = models.IntegerField(null=True, db_column='PathScaleY', blank=True)
    pathshearx = models.IntegerField(null=True, db_column='PathShearX', blank=True)
    pathsheary = models.IntegerField(null=True, db_column='PathShearY', blank=True)
    pathskew = models.IntegerField(null=True, db_column='PathSkew', blank=True)
    pathcurve = models.IntegerField(null=True, db_column='PathCurve', blank=True)
    pathradiusoffset = models.IntegerField(null=True, db_column='PathRadiusOffset', blank=True)
    pathrevolutions = models.IntegerField(null=True, db_column='PathRevolutions', blank=True)
    pathtaperx = models.IntegerField(null=True, db_column='PathTaperX', blank=True)
    pathtapery = models.IntegerField(null=True, db_column='PathTaperY', blank=True)
    pathtwist = models.IntegerField(null=True, db_column='PathTwist', blank=True)
    pathtwistbegin = models.IntegerField(null=True, db_column='PathTwistBegin', blank=True)
    profilebegin = models.IntegerField(null=True, db_column='ProfileBegin', blank=True)
    profileend = models.IntegerField(null=True, db_column='ProfileEnd', blank=True)
    profilecurve = models.IntegerField(null=True, db_column='ProfileCurve', blank=True)
    profilehollow = models.IntegerField(null=True, db_column='ProfileHollow', blank=True)
    state = models.IntegerField(null=True, db_column='State', blank=True)
    texture = models.TextField(db_column='Texture', blank=True)
    extraparams = models.TextField(db_column='ExtraParams', blank=True)
    uuid = models.CharField(max_length=36L, primary_key=True, db_column='UUID')
    media = models.TextField(db_column='Media', blank=True)
    lastattachpoint = models.IntegerField(db_column='LastAttachPoint')
    class Meta:
        db_table = 'primshapes'

class Regionban(models.Model):
    regionuuid = models.CharField(max_length=36L, db_column='regionUUID')
    banneduuid = models.CharField(max_length=36L, db_column='bannedUUID')
    bannedip = models.CharField(max_length=16L, db_column='bannedIp')
    bannediphostmask = models.CharField(max_length=16L, db_column='bannedIpHostMask')
    class Meta:
        db_table = 'regionban'

class Regionenvironment(models.Model):
    region_id = models.CharField(max_length=36L, primary_key=True)
    llsd_settings = models.TextField()
    class Meta:
        db_table = 'regionenvironment'

class Regionextra(models.Model):
    regionid = models.CharField(max_length=36L, db_column='RegionID')
    name = models.CharField(max_length=32L, db_column='Name')
    value = models.TextField(blank=True)
    class Meta:
        db_table = 'regionextra'

class Regionsettings(models.Model):
    regionuuid = models.CharField(max_length=36L, primary_key=True, db_column='regionUUID')
    block_terraform = models.IntegerField()
    block_fly = models.IntegerField()
    allow_damage = models.IntegerField()
    restrict_pushing = models.IntegerField()
    allow_land_resell = models.IntegerField()
    allow_land_join_divide = models.IntegerField()
    block_show_in_search = models.IntegerField()
    agent_limit = models.IntegerField()
    object_bonus = models.FloatField()
    maturity = models.IntegerField()
    disable_scripts = models.IntegerField()
    disable_collisions = models.IntegerField()
    disable_physics = models.IntegerField()
    terrain_texture_1 = models.CharField(max_length=36L)
    terrain_texture_2 = models.CharField(max_length=36L)
    terrain_texture_3 = models.CharField(max_length=36L)
    terrain_texture_4 = models.CharField(max_length=36L)
    elevation_1_nw = models.FloatField()
    elevation_2_nw = models.FloatField()
    elevation_1_ne = models.FloatField()
    elevation_2_ne = models.FloatField()
    elevation_1_se = models.FloatField()
    elevation_2_se = models.FloatField()
    elevation_1_sw = models.FloatField()
    elevation_2_sw = models.FloatField()
    water_height = models.FloatField()
    terrain_raise_limit = models.FloatField()
    terrain_lower_limit = models.FloatField()
    use_estate_sun = models.IntegerField()
    fixed_sun = models.IntegerField()
    sun_position = models.FloatField()
    covenant = models.CharField(max_length=36L, blank=True)
    sandbox = models.IntegerField(db_column='Sandbox')
    sunvectorx = models.FloatField()
    sunvectory = models.FloatField()
    sunvectorz = models.FloatField()
    loaded_creation_id = models.CharField(max_length=64L, blank=True)
    loaded_creation_datetime = models.IntegerField()
    map_tile_id = models.CharField(max_length=36L, db_column='map_tile_ID')
    telehubobject = models.CharField(max_length=36L, db_column='TelehubObject')
    parcel_tile_id = models.CharField(max_length=36L, db_column='parcel_tile_ID')
    covenant_datetime = models.IntegerField()
    class Meta:
        db_table = 'regionsettings'

class Regionwindlight(models.Model):
    region_id = models.CharField(max_length=36L, primary_key=True)
    water_color_r = models.FloatField()
    water_color_g = models.FloatField()
    water_color_b = models.FloatField()
    water_fog_density_exponent = models.FloatField()
    underwater_fog_modifier = models.FloatField()
    reflection_wavelet_scale_1 = models.FloatField()
    reflection_wavelet_scale_2 = models.FloatField()
    reflection_wavelet_scale_3 = models.FloatField()
    fresnel_scale = models.FloatField()
    fresnel_offset = models.FloatField()
    refract_scale_above = models.FloatField()
    refract_scale_below = models.FloatField()
    blur_multiplier = models.FloatField()
    big_wave_direction_x = models.FloatField()
    big_wave_direction_y = models.FloatField()
    little_wave_direction_x = models.FloatField()
    little_wave_direction_y = models.FloatField()
    normal_map_texture = models.CharField(max_length=36L)
    horizon_r = models.FloatField()
    horizon_g = models.FloatField()
    horizon_b = models.FloatField()
    horizon_i = models.FloatField()
    haze_horizon = models.FloatField()
    blue_density_r = models.FloatField()
    blue_density_g = models.FloatField()
    blue_density_b = models.FloatField()
    blue_density_i = models.FloatField()
    haze_density = models.FloatField()
    density_multiplier = models.FloatField()
    distance_multiplier = models.FloatField()
    max_altitude = models.IntegerField()
    sun_moon_color_r = models.FloatField()
    sun_moon_color_g = models.FloatField()
    sun_moon_color_b = models.FloatField()
    sun_moon_color_i = models.FloatField()
    sun_moon_position = models.FloatField()
    ambient_r = models.FloatField()
    ambient_g = models.FloatField()
    ambient_b = models.FloatField()
    ambient_i = models.FloatField()
    east_angle = models.FloatField()
    sun_glow_focus = models.FloatField()
    sun_glow_size = models.FloatField()
    scene_gamma = models.FloatField()
    star_brightness = models.FloatField()
    cloud_color_r = models.FloatField()
    cloud_color_g = models.FloatField()
    cloud_color_b = models.FloatField()
    cloud_color_i = models.FloatField()
    cloud_x = models.FloatField()
    cloud_y = models.FloatField()
    cloud_density = models.FloatField()
    cloud_coverage = models.FloatField()
    cloud_scale = models.FloatField()
    cloud_detail_x = models.FloatField()
    cloud_detail_y = models.FloatField()
    cloud_detail_density = models.FloatField()
    cloud_scroll_x = models.FloatField()
    cloud_scroll_x_lock = models.IntegerField()
    cloud_scroll_y = models.FloatField()
    cloud_scroll_y_lock = models.IntegerField()
    draw_classic_clouds = models.IntegerField()
    class Meta:
        db_table = 'regionwindlight'

class SpawnPoints(models.Model):
    regionid = models.CharField(max_length=36L, db_column='RegionID')
    yaw = models.FloatField(db_column='Yaw')
    pitch = models.FloatField(db_column='Pitch')
    distance = models.FloatField(db_column='Distance')
    class Meta:
        db_table = 'spawn_points'

class Terrain(models.Model):
    regionuuid = models.CharField(max_length=255L, db_column='RegionUUID', blank=True)
    revision = models.IntegerField(null=True, db_column='Revision', blank=True)
    heightfield = models.TextField(db_column='Heightfield', blank=True)
    class Meta:
        db_table = 'terrain'

